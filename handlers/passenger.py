import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import get_user, create_order, get_orders_by_user, delete_order_from_db
from states.states import OrderState
from bot import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp –∏ bot –∏–∑ bot.py
import utils.geo as geo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_passenger_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
    return markup
@dp.message_handler(Command("order"))
async def start_order(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order.
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
    """
    try:
        user = get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user[3] != "passenger":
            await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = get_orders_by_user(message.from_user.id)
        if len(active_orders) >= 2:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                                reply_markup=get_passenger_keyboard())
            return

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))

        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.", reply_markup=markup)
        await OrderState.start_location.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(content_types=types.ContentType.LOCATION, state=OrderState.start_location)
async def set_start_location(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        latitude = message.location.latitude
        longitude = message.location.longitude

        await state.update_data(start_lat=latitude, start_lon=longitude)
        await message.answer("–ö—É–¥–∞ –ø–æ–µ–¥–µ–º? –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        await OrderState.end_location.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(content_types=[types.ContentType.LOCATION, types.ContentType.TEXT], state=OrderState.end_location)
async def set_end_location(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        if message.location:
            latitude = message.location.latitude
            longitude = message.location.longitude
        else:
            location = geo.address_to_coords(message.text)
            if not location:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            longitude, latitude = location

        await state.update_data(end_lat=latitude, end_lon=longitude)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±.).")
        await OrderState.price.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
        await message.answer("–¢–∞–∫–æ–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=OrderState.price)
async def set_price(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        if not message.text.isdigit() or int(message.text) < 100:
            await message.answer("–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 100.")
            return

        price = int(message.text)
        await state.update_data(price=price)

        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–∞—Å –±—É–¥–µ—Ç –¥–≤–æ–µ' –∏–ª–∏ '–ñ–¥—É —É –ø–æ–¥—ä–µ–∑–¥–∞').")
        await OrderState.comment.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–µ–∑–¥–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=OrderState.comment)
async def set_comment(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.
    """
    try:
        comment = message.text
        await state.update_data(comment=comment)

        data = await state.get_data()
        start_address = geo.coords_to_address(data["start_lon"], data["start_lat"])
        end_address = geo.coords_to_address(data["end_lon"], data["end_lat"])

        order_info = (
            f"–í–∞—à –∑–∞–∫–∞–∑:\n"
            f"üöï –û—Ç–∫—É–¥–∞: {start_address}\n"
            f"üìç –ö—É–¥–∞: {end_address}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
        )

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")

        await message.answer(order_info, reply_markup=markup)
        await OrderState.confirmation.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=OrderState.confirmation)
async def confirm_order(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å.
    """
    try:
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
            await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_passenger_keyboard())
            await state.finish()
            return

        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = get_orders_by_user(message.from_user.id, active_only=True)
        if len(active_orders) >= 2:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
                                reply_markup=get_passenger_keyboard())
            await state.finish()
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        create_order(
            user_id=message.from_user.id,
            start_lat=data["start_lat"],
            start_lon=data["start_lon"],
            end_lat=data["end_lat"],
            end_lon=data["end_lon"],
            price=data["price"],
            comment=data["comment"]
        )

        await message.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑.",
                             reply_markup=get_passenger_keyboard())
        await state.finish()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.message_handler(lambda message: message.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders_button(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–∞—Å—Å–∞–∂–∏—Ä–∞.
    """
    await show_order_history(message)
async def show_order_history(message: types.Message):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.
    """
    try:
        user = get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user[3] != "passenger":
            await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º.")
            return

        orders = get_orders_by_user(message.from_user.id)

        if not orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.", reply_markup=get_passenger_keyboard())
            return

        history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
        for order in orders:
            start_address = geo.coords_to_address(order[3], order[2])
            end_address = geo.coords_to_address(order[5], order[4])
            history_text += (
                f"üÜî ID –∑–∞–∫–∞–∑–∞: {order[0]}\n"
                f"üöñ –û—Ç–∫—É–¥–∞: {start_address}\n"
                f"üìç –ö—É–¥–∞: {end_address}\n"
                f"üí∞ –¶–µ–Ω–∞: {order[6]}‚ÇΩ\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        await message.answer(history_text, reply_markup=get_delete_orders_keyboard(orders))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def get_delete_orders_keyboard(orders):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
    """
    markup = InlineKeyboardMarkup()
    for order in orders:
        markup.add(InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order[0]}", callback_data=f"delete_order_{order[0]}"))
    return markup

@dp.callback_query_handler(lambda callback: callback.data.startswith("delete_order_"))
async def delete_order(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
    """
    try:
        order_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        delete_order_from_db(order_id)  # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        await callback.answer(f"–ó–∞–∫–∞–∑ #{order_id} —É–¥–∞–ª—ë–Ω.")
        await callback.message.answer("–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω.", reply_markup=get_passenger_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
