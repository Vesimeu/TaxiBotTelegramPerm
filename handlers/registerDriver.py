import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import add_user, get_user
from states.states import RegisterState
from bot import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp –∏ bot –∏–∑ bot.py
from utils.geo import coords_to_address

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dp.message_handler(state=RegisterState.role)
async def register_driver(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–æ–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è.
    """
    try:
        if message.text == "üöó –Ø –≤–æ–¥–∏—Ç–µ–ª—å":
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥. –ï—Å–ª–∏ —É –≤–∞—Å –µ–≥–æ –Ω–µ—Ç, –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —Ç–∞–∫—Å–∏—Å—Ç–æ–º, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: @vesimeu",
                                reply_markup=types.ReplyKeyboardRemove())
            await RegisterState.driver_code.set()
        else:
            await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=RegisterState.driver_code)
async def taxi_password(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è.
    –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        if message.text == '2907':
            await message.answer("–£—Å–ø–µ—à–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã.")
            await RegisterState.car_model.set()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=RegisterState.car_model)
async def machine_firm(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω—ã.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        firm = message.text
        await state.update_data(car_model=firm)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã.")
        await RegisterState.car_number.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –º–∞—Ä–∫–∏ –º–∞—à–∏–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(state=RegisterState.car_number)
async def car_numbers_def(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        car_numbers = message.text
        if 6 <= len(car_numbers) <= 9:
            await state.update_data(car_number=car_numbers)
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã.")
            await RegisterState.car_photo.set()
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=RegisterState.car_photo)
async def handle_docs_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
    """
    try:
        file_info = await bot.get_file(message.photo[-1].file_id)
        downloaded_file = await bot.download_file(file_info.file_path)

        data = await state.get_data()
        car_numbers = data["car_number"]
        src = f'photo_cars/{car_numbers}.jpg'

        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file.read())

        await state.update_data(car_photo=src)
        await message.answer("–í–∫–ª—é—á–∏—Ç–µ GPS –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.üåê")
        await RegisterState.location.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(content_types=types.ContentType.LOCATION, state=RegisterState.location)
async def geo_location_driver(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è.
    """
    try:
        latitude = message.location.latitude
        longitude = message.location.longitude

        data = await state.get_data()
        phone = data["phone"]
        car_model = data["car_model"]
        car_number = data["car_number"]
        car_photo = data["car_photo"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_user(message.from_user.id, phone, "driver")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–µ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await state.finish()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")