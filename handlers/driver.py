import logging
from aiogram import types
from aiogram.dispatcher.filters import Command
from database.db import get_user, get_available_orders, accept_order, get_order_by_id
from bot import dp, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º dp –∏ bot –∏–∑ bot.py
import utils.geo as geo
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dp.message_handler(Command("orders"))
async def list_orders(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è.
    """
    try:
        user = get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user[3] != "driver":
            await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º.")
            return

        orders = get_available_orders()

        if not orders:
            await message.answer("üöñ –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        for order in orders:
            start_address = geo.coords_to_address(order[2], order[3])
            end_address = geo.coords_to_address(order[4], order[5])
            text = (
                f"üöï –ó–∞–∫–∞–∑ #{order[0]}\n"
                f"üìç –û—Ç–∫—É–¥–∞: {start_address}\n"
                f"üèÅ –ö—É–¥–∞: {end_address}\n"
                f"üí∞ –¶–µ–Ω–∞: {order[6]}‚ÇΩ\n"
                "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /accept <–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞>"
            )
            await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(Command("accept"))
async def accept_order_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accept.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–º.
    """
    try:
        user = get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user[3] != "driver":
            await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º.")
            return

        try:
            order_id = int(message.text.split()[1])
        except (IndexError, ValueError):
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /accept 5")
            return

        order = get_order_by_id(order_id)

        if not order:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        accept_order(order_id, message.from_user.id)

        passenger_id = order[1]
        passenger_message = (
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n"
            f"üöó –í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç."
        )
        await bot.send_message(passenger_id, passenger_message)

        await message.answer(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order_id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")