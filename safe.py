# libraries for bot

import telebot
from telebot import types
import sqlite3
import math
import sys
from io import BytesIO
import requests
from PIL import Image

# python files functions

from geocoder_coords import coords_to_address, addess_to_coords
from static_map_passengers import create_static_map_order  # get static map geopos for choose order

# TOKEN for bot

token = "5544251503:AAGk7nbwdirjy_4h1GqwCIGzlxxrjYHYeC0"
bot = telebot.TeleBot(token)


@bot.message_handler(commands=["start"])
def start(message):
    try:
        name = message.text
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç <b>{first_name}</b>, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /phone".format(
                             first_name=message.from_user.first_name), parse_mode='HTML',
                         reply_markup=types.ReplyKeyboardRemove())
    except:
        bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞')
        return ''


@bot.message_handler(commands=["phone"])
def phone(message):
    user_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    user_markup.add(button_phone)
    msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ?",
                           reply_markup=user_markup)
    bot.register_next_step_handler(msg, reg_or_auth)


def reg_or_auth(message):
    try:
        # user phone
        input_phone = message.contact.phone_number

        # connect to base
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()

        # find phone in passengers table
        mycursor.execute('SELECT * FROM passengers')
        passengers = mycursor.fetchall()

        for user in passengers:
            table_phone = user[1]
            if table_phone == input_phone:  # if user_phone find in passengers table

                # keyboard for auth passenger
                buttons_actions = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                button_history_ways = types.KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
                button_add_order = types.KeyboardButton(text="–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞")
                buttons_actions.add(button_history_ways)
                buttons_actions.add(button_add_order)
                mess = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=buttons_actions)
                bot.register_next_step_handler(mess, choose_action_passenger, input_phone, message.chat.id)

                return ''  # stop function
        mycursor.execute('SELECT * FROM taxi_drivers')
        drivers = mycursor.fetchall()
        print(drivers)
        for user in drivers:
            table_phone = user[1]
            if table_phone == input_phone:  # if user_phone find in taxi_drivers table
                # keyboard for auth taxi driver
                buttons_actions = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                button_settings = types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                button_choose_order = types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
                buttons_actions.add(button_settings)
                buttons_actions.add(button_choose_order)
                mess = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=buttons_actions)
                bot.register_next_step_handler(mess, choose_action_taxi_driver, input_phone, message.chat.id)

                return ''  # stop function

        # if table is empty
        buttons_characters = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button_taxi_driver = types.KeyboardButton(text="–¢–∞–∫—Å–∏—Å—Ç")
        button_passenger = types.KeyboardButton(text="–ü–∞—Å—Å–∞–∂–∏—Ä")
        buttons_characters.add(button_taxi_driver)
        buttons_characters.add(button_passenger)
        mess = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?", reply_markup=buttons_characters)
        bot.register_next_step_handler(mess, choose_character, input_phone)

    except:
        mess = bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É!")
        bot.register_next_step_handler(mess, reg_or_auth) # –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ phone

@bot.message_handler(content_types=['text'])
def error_start(message):
    if message.text == '/start' or '/phone':
        bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ /phone —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        return ''

@bot.message_handler(content_types=['text'])
def choose_action_passenger(message, user_phone = None, teg_id = None):  # auth passenger action
    if message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã':

        # connect to base
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()

        # find orders for history orders to passenger
        mycursor.execute('SELECT * FROM orders')
        orders = mycursor.fetchall()


        for order in orders:
            if order[1] == user_phone:
                first_checkpoint = coords_to_address(order[2], order[3])  # start address
                second_checkpoint = coords_to_address(order[4], order[5])  # end address
                bot.send_message(message.chat.id,
                                 f"<i><b>–ó–∞–∫–∞–∑ ‚Ññ{order[0]}.</b></i>\n\n<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {first_checkpoint}\n\n<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {second_checkpoint}\n\n<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {order[7]} –º\n\n<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {order[8]} –º–∏–Ω\n\n<b>–¶–µ–Ω–∞:</b> {order[6]} ‚ÇΩ",
                                 parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
        mess_my_ord = bot.send_message(message.chat.id, '–í–æ–∑—Ä–∞—â–∞–µ–º –Ω–∞–∑–∞–¥, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.')
        bot.register_next_step_handler(mess_my_ord, phone)

    elif message.text == '–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞' or user_phone == None:
        # geolocation new order
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_loca = types.KeyboardButton(text="üåê –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_loca)
        mess = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.üåê", reply_markup=keyboard)
        bot.register_next_step_handler(mess, geo_location, user_phone, '–ü–∞—Å—Å–∞–∂–∏—Ä')
    else:
        mess_1 = bot.send_message(message.chat.id , '–û—à–∏–±–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        bot.register_next_step_handler(mess_1,choose_action_passenger)

@bot.message_handler(content_types=['text'])
def error_start(message):
    if message.text == '/start' or '/phone':
        bot.send_message(message.chat.id,'–ù–∞–ø–∏—à–∏—Ç–µ /phone —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        return ''

@bot.message_handler(content_types=['text'])
def choose_action_taxi_driver(message, user_phone , teg_id):  # auth taxi driver action
    if message.text == '–í—ã–±—Ä–∞—Ç—å –ø–æ–µ–∑–¥–∫—É':

        # connect to base
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()
        print(user_phone)
        # choose order for taxi driver
        mycursor.execute(f'SELECT * FROM taxi_drivers')
        taxi_drivers = mycursor.fetchall()
        for taxi_driver in taxi_drivers:
            if taxi_driver[1] == user_phone:
                print(taxi_driver)

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_loca = types.KeyboardButton(text="üåê –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
                keyboard.add(button_loca)

                mess = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.üåê", reply_markup=keyboard)
                bot.register_next_step_handler(mess, geo_location, user_phone, '–¢–∞–∫—Å–∏—Å—Ç', firm=taxi_driver[2],
                                               car_numbers=taxi_driver[3], src_photo_car=taxi_driver[-2])
                break
    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        markup_setting = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_setting_profile = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å|–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        button_setting_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup_setting.add(button_setting_profile,button_setting_back)
        mess_setting = bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',reply_markup=markup_setting)
        bot.register_next_step_handler(mess_setting,setting_taxi,user_phone,message.chat.id)

    else:
        mess_1 = bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ')
        bot.register_next_step_handler(mess_1,choose_action_taxi_driver,phone,message.chat.id)

@bot.message_handler(content_types=['text'])
def setting_taxi(message,phone_taxi,teg_id):
    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id,'–í–æ–∑—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥',reply_markup=types.ReplyKeyboardRemove())
        markup_setting_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_next = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –ø–æ–µ–∑–¥–∫—É')
        markup_setting_back.add(button_next)
        mess_back = bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',reply_markup=markup_setting_back)
        bot.register_next_step_handler(mess_back,choose_action_taxi_driver,phone_taxi,message.chat.id)

    elif message.text == '–£–¥–∞–ª–∏—Ç—å|–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        mydb = sqlite3.connect('base.db')
        mycursor_setting = mydb.cursor()
        mycursor_setting.execute("DELETE FROM taxi_drivers WHERE phone = {phone1}".format(phone1 = phone_taxi))
        mydb.commit()
        mess_delete = bot.send_message(message.chat.id,'–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.',reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(mess_delete,phone)
    else:
        mess_error_setting = bot.send_message(message.chat.id,'–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å–≤—Ç–∏–µ:')
        bot.register_next_step_handler(mess_error_setting,setting_taxi,phone_taxi,message.chat.id)

@bot.message_handler(content_types=['text'])
def choose_character(message, user_phone):  # choose taxi_drivers or passenger
    if message.text == '–¢–∞–∫—Å–∏—Å—Ç':
        mess = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã.", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(mess, machine_firm, user_phone)


    elif message.text == '–ü–∞—Å—Å–∞–∂–∏—Ä':

        # connect to base
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()

        # Add new passenger in 'passengers' table
        sqlFormula = "INSERT INTO passengers ('phone', 'teg_id') VALUES (?,?)"
        mycursor.execute(sqlFormula, (user_phone, message.chat.id))
        mydb.commit()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_loca = types.KeyboardButton(text="üåê –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_loca)
        mess = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.üåê", reply_markup=keyboard)
        bot.register_next_step_handler(mess, geo_location, user_phone, '–ü–∞—Å—Å–∞–∂–∏—Ä')


@bot.message_handler(content_types=['text'])  # machine_firm
def machine_firm(message, phone):
    firm = message.text
    mess = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã.", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(mess, car_numbers, phone, firm)


@bot.message_handler(content_types=['text'])  # car_numbers
def car_numbers(message, phone, machine_firm):
    car_numbers = message.text

    mess = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã.")
    bot.register_next_step_handler(mess, handle_docs_photo, car_numbers, phone, machine_firm)


@bot.message_handler(content_types=['photo'])  # function for get photo car from user
def handle_docs_photo(message, car_numbers, phone, machine_firm):
    try:
        chat_id = message.chat.id

        file_info = bot.get_file(message.photo[0].file_id)

        downloaded_file = bot.download_file(file_info.file_path)

        src = 'photo_cars/' + car_numbers + '.png';  # save png photo name - car_numbers
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_loca = types.KeyboardButton(text="üåê –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_loca)

        mess = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.üåê", reply_markup=keyboard)
        bot.register_next_step_handler(mess, geo_location, phone, '–¢–∞–∫—Å–∏—Å—Ç', firm=machine_firm, car_numbers=car_numbers,
                                       src_photo_car=src)
    except:
        pass


@bot.message_handler(content_types=['text'])
def geo_location(message, phone = None, job = None, firm=None, car_numbers=None,
                 src_photo_car=None):  # firm and car_numbers if taxi, default passenger
    try:
        latitude = message.location.latitude
        longitude = message.location.longitude
        dict_length = {}

        address_location = coords_to_address(longitude, latitude)  # get address from coords, function file geocoder.py
        bot.send_message(message.chat.id, address_location, reply_markup=types.ReplyKeyboardRemove())

        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()

        if job == '–¢–∞–∫—Å–∏—Å—Ç':
            c = 0
            mycursor.execute(f'SELECT * FROM taxi_drivers')
            taxi_drivers = mycursor.fetchall()
            for driver in taxi_drivers:
                if driver[1] != phone:
                    c += 1
            if c == len(taxi_drivers):
                sqlFormula = "INSERT INTO taxi_drivers ('phone', 'machine_firm', 'car_numbers', 'longitude', 'latitude', 'photo_car', 'teg_id') VALUES (?,?,?,?,?,?,?)"
                mycursor.execute(sqlFormula,
                                 (phone, firm, car_numbers, longitude, latitude, src_photo_car, message.chat.id))
                mydb.commit()

                mydb = sqlite3.connect('base.db')
                mycursor = mydb.cursor()

            mycursor.execute(f'SELECT * FROM orders')
            orders = mycursor.fetchall()
            for us in orders:
                user = us

                first_checkpoint = coords_to_address(user[2], user[3])  # start address
                second_checkpoint = coords_to_address(user[4], user[5])  # end address
                bot.send_message(message.chat.id,
                                 f"<i><b>–ó–∞–∫–∞–∑ ‚Ññ{user[0]}.</b></i>\n\n<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {first_checkpoint}\n\n<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {second_checkpoint}\n\n<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {user[7]} –º\n\n<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {user[8]} –º–∏–Ω\n\n<b>–¶–µ–Ω–∞:</b> {user[6]} ‚ÇΩ",
                                 parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())

            mess = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.", parse_mode='HTML',
                                    reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(mess, choose_order)


        elif job == '–ü–∞—Å—Å–∞–∂–∏—Ä' or job == 'None':
            job = '–ü–∞—Å—Å–∞–∂–∏—Ä'
            mess = bot.send_message(message.chat.id, "<b>–ö—É–¥–∞ –µ–¥–µ–º?( –ù–∞–ø—Ä–∏–º–µ—Ä: –ù–æ–≤—ã–µ –õ—è–¥—ã, –ü—É—à–∫–∏–Ω–∞ 6 )</b>", parse_mode='HTML',
                                    reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(mess, where_go, phone, longitude, latitude)
    except:
            bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!')
            bot.register_next_step_handler(message,choose_action_passenger)



@bot.message_handler(content_types=['text'])
def choose_order(message):  # num order
    num_order = message.text
    num_order = int(num_order)
    mybdord = sqlite3.connect('base.db')
    mycursor_order = mybdord.cursor()
    mycursor_order.execute("SELECT * FROM orders")
    len_ord = len(mycursor_order.fetchall())
    if num_order <= len_ord:
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()
        mycursor.execute(f'SELECT * FROM orders')
        users = mycursor.fetchall()
        passenger = []
        for us in users:  # find order in table by id
            if us[0] == int(num_order):
                passenger.append(us)
                print(passenger)

        first_checkpoint = coords_to_address(passenger[0][2], passenger[0][3])  # start address
        second_checkpoint = coords_to_address(passenger[0][4], passenger[0][5])  # end address
        bot.send_message(message.chat.id,
                         f"<i><b>–ù–æ–º–µ—Ä –ø–∞—Å—Å–∞–∂–∏—Ä–∞: {passenger[0][1]}.</b></i>\n\n<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {first_checkpoint}\n\n<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {second_checkpoint}\n\n<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {passenger[0][7]} –º\n\n<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {passenger[0][8]} –º–∏–Ω\n\n<b>–¶–µ–Ω–∞:</b> {passenger[0][6]} ‚ÇΩ",
                         parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())

        # create map_point.png for choose order
        create_static_map_order(f'{passenger[0][2]},{passenger[0][3]}')

        # send map_point.png to taxi driver
        bot.send_photo(message.chat.id, open('map_point.png', 'rb'));

        # send photo taxi_car to passenger
        mydb = sqlite3.connect('base.db')
        mycursor = mydb.cursor()
        mycursor.execute(f'SELECT * FROM taxi_drivers WHERE teg_id={message.chat.id}')
        user_taxi = mycursor.fetchall()
        src_photo_car = user_taxi[0][6]  # src_photo_car
        mydb1 = sqlite3.connect('base.db')
        mycursor1 = mydb1.cursor()
        mycursor1.execute(f'SELECT * FROM taxi_drivers WHERE teg_id={message.chat.id}')
        info_taxi = mycursor1.fetchall()
        number_taxi = info_taxi[0][1]
        marka_taxi = info_taxi[0][2]

        # mycursor.execute(f'SELECT * FROM taxi_drivers WHERE teg_id={message.chat.id}')
        # numbers_taxi = mycursor[]

        bot.send_message(passenger[0][-1], '–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!')
        bot.send_message(passenger[0][-1], '–ù–æ–º–µ—Ä —Ç–∞–∫—Å–∏—Å—Ç–∞:')
        bot.send_message(passenger[0][-1], number_taxi)
        bot.send_message(passenger[0][-1], '–ú–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã:')
        bot.send_message(passenger[0][-1], marka_taxi)
        bot.send_photo(passenger[0][-1], open(src_photo_car, 'rb'));  # passenger[0][-1] - teg_id user

        sql = 'DELETE FROM orders WHERE id=?'
        mycursor.execute(sql, (int(num_order),))
        mydb.commit()
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.')
        bot.register_next_step_handler(message,choose_order)


@bot.message_handler(content_types=['text'])
def where_go(message, phone=None, longitude_start=None, latitude_start=None):  # end address for passenger
    try:
        address_go = message.text
        longitude_end, latitude_end = [float(x) for x in addess_to_coords(address_go).split(' ')]

        mess = bot.send_message(message.chat.id, "<b>–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –≤ ‚ÇΩ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –∞–¥–µ–≤–∞—Ç–Ω—É—é —Ü–µ–Ω—É –ø–æ–µ–∑–¥–∫–∏, –∏–Ω–∞—á–µ –∑–∞–∫–∞–∑ –Ω–∏–∫—Ç–æ –Ω–µ –≤–æ–∑—å–º—ë—Ç.–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞ - 100—Ä—É–±.</b>", parse_mode='HTML',
                                reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(mess, price_way, phone, longitude_start, latitude_start, longitude_end, latitude_end)
    except:
        bot.send_message(message.chat.id,'–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.') ## –ï–°–õ–ò –ù–ï –í–ï–†–ù–û –£–ö–ê–ó–ê–õ –ö–£–î–ê
        bot.register_next_step_handler(message,choose_action_passenger)

@bot.message_handler(content_types=['text'])
def price_way(message, phone, longitude_start, latitude_start, longitude_end,
              latitude_end):  # end address for passenger
    price = message.text
    if price.isdigit() == True and len(price) <= 5 and int(price) >= 100:
        # if int(price) >= 100:
            price_way_mes = int(message.text)

            # length of way
            x1, y1 = longitude_start, latitude_start
            x2, y2 = longitude_end, latitude_end

            y = math.radians((y1 + y2) / 2)
            x = math.cos(y)
            n = abs(x1 - x2) * 111000 * x
            n2 = abs(y1 - y2) * 111000
            length_way = round(math.sqrt(n * n + n2 * n2))
            # ---------------

            # time way
            time_way = round(length_way / (40 * 1000) * 60)
            # --------

            first_checkpoint = coords_to_address(longitude_start, latitude_start)
            second_checkpoint = coords_to_address(longitude_end, latitude_end)
            # bot.send_message(message.chat.id,'–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!.–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /start.')





            bot.send_message(message.chat.id,
                             f"<i><b>–í–∞—à –∑–∞–∫–∞–∑.</b></i>\n\n<i><b>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {first_checkpoint}\n\n<i><b>–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:</b></i> {second_checkpoint}\n\n<i><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b></i> {length_way} –º\n\n<i><b>–í—Ä–µ–º—è –ø—É—Ç–∏:</b></i> {time_way} –º–∏–Ω\n\n<b>–¶–µ–Ω–∞:</b> {price_way_mes} ‚ÇΩ",
                             parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())
            mydb = sqlite3.connect('base.db')
            mycursor = mydb.cursor()
            sqlFormula = "INSERT INTO orders ('phone', 'longitude_start', 'latitude_start', 'longitude_end', 'latitude_end', 'price', 'length_way', 'time_way', 'teg_id') VALUES (?,?,?,?,?,?,?,?,?)"
            mycursor.execute(sqlFormula, (
                phone, longitude_start, latitude_start, longitude_end, latitude_end, price_way_mes, length_way, time_way,
                message.chat.id))
            mydb.commit()
            markup_ord = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_ord_yes = types.KeyboardButton(text="–î–∞")
            button_ord_no = types.KeyboardButton(text="–ù–µ—Ç")
            markup_ord.add(button_ord_yes)
            markup_ord.add(button_ord_no)
            msg_ord = bot.send_message(message.chat.id, "–í—Å—ë –≤–µ—Ä–Ω–æ?", reply_markup=markup_ord)
            bot.register_next_step_handler(msg_ord, func_ord,phone)
        # else:
        #     bot.send_message(message.chat.id,'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ–µ–∑–¥–∫–∏ 100 —Ä—É–±–ª–µ–π. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        #     # bot.register_next_step_handler(message,price_way)
        #     return ''
    else:
        mess_error = bot.send_message(message.chat.id,'–û—à–∏–±–∫–∞, –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ 100—Ä—É–±.–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏.')
        bot.register_next_step_handler(mess_error,price_way,phone, longitude_start, latitude_start, longitude_end,
              latitude_end)
@bot.message_handler(content_types=['text'])
def func_ord(message,phone):
    if message.text == '–î–∞':
        bot.send_message(message.chat.id,'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!',reply_markup=types.ReplyKeyboardRemove())
        user_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        button_func_ord_1 = types.KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
        button_func_ord_2 = types.KeyboardButton(text="–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞")
        user_markup.add(button_func_ord_1,button_func_ord_2)
        msg = bot.send_message(message.chat.id,
                               "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                               reply_markup=user_markup)
        bot.register_next_step_handler(msg, choose_action_passenger,user_phone = phone)

    else:
        mess_func_ord_no = bot.send_message(message.chat.id,'–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –Ω–∞–∑–∞–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(mess_func_ord_no,choose_action_passenger)


if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)